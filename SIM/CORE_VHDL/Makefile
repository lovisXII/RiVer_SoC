BUILD=build
SIM_DIR=sim
RISC=riscv32-unknown-elf-gcc
GHDL?=/opt/ghdl/bin/ghdl
GHDLFLAGS?=-v --workdir=$(BUILD)
COMPONENTS = \
	UTIL/fifo UTIL/util UTIL/csa \
	core \
	IFETCH/ifetch \
	DEC/dec \
	EXE/shifter EXE/alu EXE/exec EXE/x0_multiplier EXE/divider \
	MEM/mem MEM/x1_multiplier \
	REG/reg \
	WBK/wbk WBK/x2_multiplier \
	CSR/csr \
	CACHES/icache CACHES/buffer_cache \
	tb/tb_buff_cache
TB=core_cache_tb
MODS=$(TB) $(COMPONENTS) 
SOURCES=$(addsuffix .vhd, $(MODS))
OBJ=$(addsuffix .o, $(addprefix $(BUILD)/, $(notdir $(MODS))))
CC=gcc
SW_DIR=../../SOFT
TEST=$(SW_DIR)/TESTS/I/test_add.s
LD_SCRIPT= -T $(SW_DIR)/kernel.ld
RISC_FLAGS= -nostdlib $(LD_SCRIPT)

all: run warning

run: $(TB) kernel
	cp $(SW_DIR)/app.ld kernel sim/
	./$(TB) $(TEST) --vcd=$(SIM_DIR)/$(TB).vcd --wave=$(SIM_DIR)/$(TB).ghw

core_cache_tb : warning $(OBJ) $(BUILD)/ram_sim.o $(BUILD)/core_cache_tb.o
	${GHDL} -e ${GHDLFLAGS} -Wl,$(BUILD)/ram_sim.o core_cache_tb

core_tb : warning $(OBJ) $(BUILD)/ram_sim.o $(BUILD)/core_tb.o 
	${GHDL} -e ${GHDLFLAGS} -Wl,$(BUILD)/ram_sim.o core_tb

tb_buff_cache: $(BUILD)/tb_buff_cache.o
	${GHDL} -e ${GHDLFLAGS} tb_buff_cache

$(BUILD)/ram_sim.o: ram_sim.c
	gcc -c ram_sim.c -o $(BUILD)/ram_sim.o

$(BUILD)/a.out: $(BUILD)/e~$(TB).o ram_sim.c 
	cd $(BUILD) && $(CC) ../ram_sim.c -Wl,`$(GHDL) --list-link $(TB)`

$(BUILD)/e~$(TB).o: $(OBJ)
	cd $(BUILD) && $(GHDL) --bind $(TB)

$(BUILD)/core_tb.o: $(SOURCES)
	$(GHDL) -a $(GHDLFLAGS) $^

$(BUILD)/core_cache_tb.o: $(SOURCES)
	$(GHDL) -a $(GHDLFLAGS) $^

$(BUILD)/tb_buff_cache.o: $(SOURCES)
	$(GHDL) -a $(GHDLFLAGS) $^

kernel: $(SW_DIR)/exception.s $(SW_DIR)/reset.s
	$(RISC) $(RISC_FLAGS) $^ -o $@

warning :
	@echo
	@echo Please dont forget to give an argument when doing make, otherwise it could segfault
	@echo You have to do : make TEST=pth_to_the_test/test_name
	@echo
clean:
	rm $(BUILD)/* $(SIM_DIR)/* -f *.lst *.o *.cf core_tb *.vcd *.ghw *.out \
	*.out.txt *.out.txt.s
